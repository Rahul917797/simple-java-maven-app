pipeline {
    agent any
    environment {
        DOCKER_IMAGE_NAME = "nginx"
        DOCKER_TAG = "latest"
        //REGISTRY = "docker.io"
        HELM_RELEASE_NAME = "nginx"
        HELM_NAMESPACE = "default"
        AWS_REGION = "us-east-1"
    }
    stages {
        stage('Checkout Code') {
            steps {
                // Checkout the code from your Git repository
                git 'https://github.com/ranju199502/simple-java-maven-app.git'
            }
        }
        
        stage('Maven Build') {
            steps {
                script {
                    // Run Maven build to compile the project and create JAR
                    sh 'mvn clean install -DskipTests'
                }
            }
        }
        //stage('SonarQube Analysis') {
          //  steps {
            //    withSonarQubeEnv(installationName: 'sonarqube', credentialsId: 'sonarqube') {
              //      sh "mvn clean verify sonar:sonar -Dsonar.projectKey=simple-java-maven-app -Dsonar.projectName='simple-java-maven-app'"
               // }    
           // } 
       // }
        
        
        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image using Dockerfile in the repository
                    sh """
                    docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} .
                    """
                }
            }
        }
        
        stage('Login to AWS ECR') {
            steps {
                script {
                    withAWS(credentials: 'aws-creds', region: AWS_REGION) {
                    // Login to AWS ECR
                    sh """
                    aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 905418235504.dkr.ecr.us-east-1.amazonaws.com
                    """
                    }
                }
            }
        }

        stage('Push Docker Image to ECR') {
            steps {
                script {
                    // Tag the image for ECR
                    sh "docker tag nginx:latest 905418235504.dkr.ecr.us-east-1.amazonaws.com/nginx:latest"
                    
                    // Push the Docker image to ECR
                    sh "docker push 905418235504.dkr.ecr.us-east-1.amazonaws.com/nginx:latest"
                }
            }
        }

        stage('Package Helm Chart') {
            steps {
                script {
                    // Package the Helm chart
                    sh 'helm create nginx'

                    // Modify the service type to LoadBalancer instead of ClusterIP
                    sh """
                    sed -i 's/ClusterIP/LoadBalancer/' nginx/values.yaml
                    sed -i 's/replicaCount: 1/replicaCount: 3/' nginx/values.yaml
                    
                    """
                    sh 'helm lint nginx'
                    sh 'helm package nginx'
                }
            }
        }
        stage('AWS Authentication') {
            steps {
                script {
                    // Authenticate with AWS using environment variables (set these in Jenkins credentials)
                   // withCredentials([awsCredentials(credentialsId: 'aws-creds')]) {
                    withAWS(credentials: 'aws-creds', region: AWS_REGION) {
                        sh """
                        aws sts get-caller-identity
                        aws eks --region us-east-1 update-kubeconfig --name demo-eks
                         kubectl get nodes
                         helm upgrade --install ${HELM_RELEASE_NAME} nginx-0.1.0.tgz --namespace ${HELM_NAMESPACE}
                         sleep 10
                         kubectl get pods
                         kubectl get all
                        """
                    }
                }
            }
        }

        
    }

    post {
        success {
            echo 'Pipeline successfully completed!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
